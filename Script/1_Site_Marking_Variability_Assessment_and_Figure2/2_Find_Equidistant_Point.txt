function P_equidistant = EquidistantPoint3D(A, B, C)
% 
%   This function computes a point that is equidistant to 
%   three 3-Dimensional data points, e.g., A, B, and C.
%   Inputs:
%       A,B,C : three-dimensional vectors with [Ax, Ay, Az], [Bx, By,
%       Bz], [Cx, Cy, Cz]
%
%   Output:
%       P_equidistant : Three-dimensional vector with [Px, Py, Pz]
%
%   Example Data:
%       A = [1, 2, 3];
%       B = [2, -1, 3];
%       C = [2, 0, 0];
%       P = EquidistantPoint3D(A, B, C);  
%
%   Steps:
%       1. Creates perpendicular bisector planes based on AB and AC.
%       2. Uses the plane containing A, B, and C as a third constraint.
%       3. Solves the resulting linear system to find the intersection point.

    % --- Compute midpoints of edges AB and AC ---
    midpoint_AB = (A + B) / 2;  
    midpoint_AC = (A + C) / 2;  

    % --- Compute direction vectors AB and AC ---
    direction_AB = B - A;  
    direction_AC = C - A;  

    % --- Compute normal vector to the plane ABC ---
    normal = cross(direction_AB, direction_AC);

    % --- Form the system of equations ---
    % The equidistant point:
    %   1. Lies on the perpendicular bisector plane of AB:
    %       (P - midpoint_AB) · direction_AB = 0
    %   2. Lies on the perpendicular bisector plane of AC:
    %       (P - midpoint_AC) · direction_AC = 0
    %   3. Lies on the plane containing A, B, and C:
    %       (P - A) · normal = 0
    %
    M = [direction_AB; direction_AC; normal]; 
    b = [dot(midpoint_AB, direction_AB); 
         dot(midpoint_AC, direction_AC); 
         dot(normal, A)];          

    % --- Solve for P_equidistant ---
    P_equidistant = (M \ b)';  

end

